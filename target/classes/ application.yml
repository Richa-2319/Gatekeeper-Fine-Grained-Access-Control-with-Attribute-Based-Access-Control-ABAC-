// Update: src/main/resources/application.yml
server:
  port: 8080

spring:
  application:
    name: gatekeeper-abac

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/gatekeeper}
    username: ${SPRING_DATASOURCE_USERNAME:gatekeeper}
    password: ${SPRING_DATASOURCE_PASSWORD:password}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  redis:
    host: ${SPRING_REDIS_HOST:localhost}
    port: ${SPRING_REDIS_PORT:6379}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: gatekeeper-policy-updates
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: latest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  cache:
    type: redis

gatekeeper:
  jwt:
    secret: ${GATEKEEPER_JWT_SECRET:myVerySecretKeyThatIsAtLeast256BitsLongForHS512Algorithm}
    expiration: 86400000 # 24 hours
  opa:
    url: ${GATEKEEPER_OPA_URL:http://localhost:8181}
    enabled: ${GATEKEEPER_OPA_ENABLED:true}
  audit:
    enabled: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

logging:
  level:
    com.gatekeeper: DEBUG
    org.springframework.security: INFO
    org.springframework.kafka: INFO
