services:
  postgres:
    image: postgres:15-alpine
    container_name: gatekeeper-postgres
    environment:
      POSTGRES_DB: gatekeeper
      POSTGRES_USER: gatekeeper
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gatekeeper"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gatekeeper-network

  redis:
    image: redis:7-alpine
    container_name: gatekeeper-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - gatekeeper-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: gatekeeper-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - gatekeeper-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: gatekeeper-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - gatekeeper-network

  opa:
    image: openpolicyagent/opa:latest-envoy
    container_name: gatekeeper-opa
    ports:
      - "8181:8181"
    command: ["run", "--server", "--addr=0.0.0.0:8181"]
    volumes:
      - ./docker/opa-policies:/policies
    networks:
      - gatekeeper-network

  # Gatekeeper Application
  gatekeeper-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gatekeeper-app
    ports:
      - "8080:8080"
    environment:
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/gatekeeper
      SPRING_DATASOURCE_USERNAME: gatekeeper
      SPRING_DATASOURCE_PASSWORD: password

      # Redis configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379

      # Kafka configuration
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092

      # OPA configuration
      GATEKEEPER_OPA_URL: http://opa:8181
      GATEKEEPER_OPA_ENABLED: "true"

      # JWT configuration
      GATEKEEPER_JWT_SECRET: myVerySecretKeyThatIsAtLeast256BitsLongForHS512Algorithm
      GATEKEEPER_JWT_EXPIRATION: 86400000

      # Spring profile
      SPRING_PROFILES_ACTIVE: prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      opa:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - gatekeeper-network

volumes:
  postgres_data:
  redis_data:

networks:
  gatekeeper-network:
    driver: bridge
